/**
 * English : 
 * This script is free and never for sale!!
 * If someone sells this script, please contact me!!
 * 
 * Indonesian :
 * Script ini gratis dan tidak di perjualbelikan!!
 * Jika seseorang menjual script ini, harap kontak saya!!
 *
 * Harap Tambahkan Credit 
 * Apabila Ingin Recode / Reupload
 * 
 * Telegram : t.me/itztobz
 * Instagram : ini.tobz
 * WhatsApp : 081311850715
 */

console.clear();    

const { default: Axios } = require('axios');
const cfonts = require('cfonts');
const chalk = require('chalk');
const rs = require('readline-sync');
const moment = require("moment-timezone");
moment.tz.setDefault('Asia/Jakarta').locale('id')

async function start() {
    
    cfonts.say('STUMBLE GIM RUSAK', {
        font: 'shade',   
        align: 'center',
        colors: ['yellow','green'],
        background: 'transparent',
        letterSpacing: 1,
        lineHeight: 1,
        space: true,
        maxLength: '0',
        gradient: false,
        independentGradient: false,
        transitionGradient: false,
        env: 'node'
    });
    console.log(chalk.blue('======================================'))
    console.log(chalk.green('Creator : KRISNA'))
    console.log(chalk.green('Instagram : ini.tobz'))
    console.log(chalk.green('WhatsApp : 081311850715'))
    console.log(chalk.blue('======================================'))

    await questionList()

}
start()

async function runExploit(code, round, delay) {
    return new Promise((resolve, reject) => {
        Axios.get(`http://kitkabackend.eastus.cloudapp.azure.com:5010/round/finishv2/${round}`, {
            headers: {
                "authorization": code,
                "use_response_compression": true,
                "Accept-Encoding": "gzip",
                "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:101.0) Gecko/20100101 Firefox/101.0"
            }
        }).then(async (result) => {
            await reqDelay(delay * 1000)
            resolve(result.data)
        }).catch((e) => {
            if (e.code == "ETIMEDOUT") {
                console.log(chalk.red("[ x ]") +  " Server Timeout, Please run the script again...");
            } else {
                resolve(e.response.data)
            }
        });
    })
}

async function reqDelay (ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function listLeadboardCrowns(type) {
    return new Promise((resolve, reject) => {
        if (type == "1") {
            Axios.get("http://kitkabackend.eastus.cloudapp.azure.com:5010/highscore/crowns/list?start=0&count=100&country=id")
            .then((result) => {
                resolve(result.data)
            })
            .catch((e) => {})
        } else if (type == "2") {
            Axios.get("http://kitkabackend.eastus.cloudapp.azure.com:5010/highscore/crowns/list?start=0&count=100&country=")
            .then((result) => {
                resolve(result.data)
            })
            .catch((e) => {})
        }
    })
}

async function listLeadboardThropies(type) {
    return new Promise((resolve, reject) => {
        if (type == "1") {
            Axios.get("http://kitkabackend.eastus.cloudapp.azure.com:5010/highscore/rank/list?start=0&count=100&country=id")
            .then((result) => {
                resolve(result.data)
            })
            .catch((e) => {})
        } else if (type == "2") {
            Axios.get("http://kitkabackend.eastus.cloudapp.azure.com:5010/highscore/rank/list?start=0&count=100&country=")
            .then((result) => {
                resolve(result.data)
            })
            .catch((e) => {})
        }
    })
}

async function questionList() {
    
    console.log(`
[ 1 ] Top Leadboard
[ 2 ] Stumble Exploit
`)
    var list = ["1", "2"]
    var select = rs.question(chalk.green("[ ! ]") + " Input Menu: ")
        if (select.length === 0) {
            console.log(chalk.red("[ x ]") +  " Please Input Menu!");
            select = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
        }
        if (!Number(select)) { 
            console.log(chalk.red("[ x ]") +  " Please Input Menu With Numbers Not Letters!");
            select = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
        }
        if (!list.includes(select)) { 
            console.log(chalk.red("[ x ]") +  " Please Input The Number Of Menu Correctly!");
            select = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
        }

    if (select == "1") {

        console.log(`
[ 1 ] Top Leadboard Trophies
[ 2 ] Top Leadboard Crowns
`)
        list = ["1", "2"]
        var type = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards : ")
            if (type.length === 0) {
                console.log(chalk.red("[ x ]") +  " Please Input Top Leadboards!");
                type = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards (1, 2): ");
            }
            if (!Number(type)) { 
                console.log(chalk.red("[ x ]") +  " Please Input Top Leadboards With Numbers Not Letters!");
                type = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards (1, 2): ");
            }
            if (!list.includes(type)) { 
                console.log(chalk.red("[ x ]") +  " Please Input The Number Of Top Leadboards Correctly!");
                type = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards (1, 2): ");
            }

        // THROPIES LEADBORDS
        if (type == "1") {

            console.log(`
[ 1 ] Local ( Indonesian )
[ 2 ] Global
`)
            list = ["1", "2"]
            var leadboard = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards : ")
                if (leadboard.length === 0) {
                    console.log(chalk.red("[ x ]") +  " Please Input Top Leadboards!");
                    leadboard = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards (1, 2): ");
                }
                if (!Number(leadboard)) { 
                    console.log(chalk.red("[ x ]") +  " Please Input Top Leadboards With Numbers Not Letters!");
                    leadboard = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards (1, 2): ");
                }
                if (!list.includes(leadboard)) { 
                    console.log(chalk.red("[ x ]") +  " Please Input The Number Of Top Leadboards Correctly!");
                    leadboard = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards (1, 2): ");
                }
              
            var result
            if (leadboard == "1") {
              
                result = await listLeadboardThropies(leadboard)
                console.log("")
                console.log("[ + ] Top Leadboard Thropies")
                for (let i = 0; i < result.scores.length; i++) {
                    console.log(chalk.green(`[ ${1 + i} ]`) + " | "  + chalk.blue(result.scores[i].User.Username) + " | " +  chalk.red(result.scores[i].User.Country) + " | " + chalk.yellow(result.scores[i].User.SkillRating) + " Thropies")
                }

                console.log(`
[ 1 ] Back to Menu
[ 2 ] Leave
                `)
                back = ["1", "2"]
                var back = rs.question(chalk.green("[ ! ]") + " Input Menu : ")
                    if (back.length === 0) {
                        console.log(chalk.red("[ x ]") +  " Please Input Menu!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }
                    if (!Number(back)) { 
                        console.log(chalk.red("[ x ]") +  " Please Input Menu With Numbers Not Letters!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }
                    if (!list.includes(back)) { 
                        console.log(chalk.red("[ x ]") +  " Please Input The Number Of Menu Correctly!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }

                if (back == "1") {
                    start()
                } else if (back == "2") {
                    return
                }
              
            } else if (leadboard == "2") {
              
                result = await listLeadboardThropies(leadboard)
                console.log("")
                console.log("[ + ] Top Leadboard Thropies")
                for (let i = 0; i < result.scores.length; i++) {
                    console.log(chalk.green(`[ ${1 + i} ]`) + " | "  + chalk.blue(result.scores[i].User.Username) + " | " +  chalk.red(result.scores[i].User.Country) + " | " + chalk.yellow(result.scores[i].User.SkillRating) + " Thropies")
                }
                
                console.log(`
[ 1 ] Back to Menu
[ 2 ] Leave
                `)
                back = ["1", "2"]
                var back = rs.question(chalk.green("[ ! ]") + " Input Menu : ")
                    if (back.length === 0) {
                        console.log(chalk.red("[ x ]") +  " Please Input Menu!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }
                    if (!Number(back)) { 
                        console.log(chalk.red("[ x ]") +  " Please Input Menu With Numbers Not Letters!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }
                    if (!list.includes(back)) { 
                        console.log(chalk.red("[ x ]") +  " Please Input The Number Of Menu Correctly!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }

                if (back == "1") {
                    start()
                } else if (back == "2") {
                    return
                }

            }       

        } else if (type == "2") {

            console.log(`
[ 1 ] Local ( Indonesian )
[ 2 ] Global
`)
            list = ["1", "2"]
            var leadboard = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards : ")
                if (leadboard.length === 0) {
                    console.log(chalk.red("[ x ]") +  " Please Input Top Leadboards!");
                    leadboard = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards (1, 2): ");
                }
                if (!Number(leadboard)) { 
                    console.log(chalk.red("[ x ]") +  " Please Input Top Leadboards With Numbers Not Letters!");
                    leadboard = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards (1, 2): ");
                }
                if (!list.includes(leadboard)) { 
                    console.log(chalk.red("[ x ]") +  " Please Input The Number Of Top Leadboards Correctly!");
                    leadboard = rs.question(chalk.green("[ ! ]") + " Input Top Leadboards (1, 2): ");
                }
              
            var result
            var back
            if (leadboard == "1") {
              
                result = await listLeadboardCrowns(leadboard)
                console.log("")
                console.log("[ + ] Top Leadboard Crowns")
                for (let i = 0; i < result.scores.length; i++) {
                    console.log(chalk.green(`[ ${1 + i} ]`) + " | "  + chalk.blue(result.scores[i].User.Username) + " | " +  chalk.red(result.scores[i].User.Country) + " | " + chalk.yellow(result.scores[i].User.Crowns) + " Thropies")
                }

                console.log(`
[ 1 ] Back to Menu
[ 2 ] Leave
                `)
                back = ["1", "2"]
                var back = rs.question(chalk.green("[ ! ]") + " Input Menu : ")
                    if (back.length === 0) {
                        console.log(chalk.red("[ x ]") +  " Please Input Menu!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }
                    if (!Number(back)) { 
                        console.log(chalk.red("[ x ]") +  " Please Input Menu With Numbers Not Letters!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }
                    if (!list.includes(back)) { 
                        console.log(chalk.red("[ x ]") +  " Please Input The Number Of Menu Correctly!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }

                if (back == "1") {
                    start()
                } else if (back == "2") {
                    return
                }
              
            } else if (leadboard == "2") {
              
                result = await listLeadboardCrowns(leadboard)
                console.log("")
                console.log("[ + ] Top Leadboard Crowns")
                for (let i = 0; i < result.scores.length; i++) {
                    console.log(chalk.green(`[ ${1 + i} ]`) + " | "  + chalk.blue(result.scores[i].User.Username) + " | " +  chalk.red(result.scores[i].User.Country) + " | " + chalk.yellow(result.scores[i].User.Crowns) + " Thropies")
                }

                console.log(`
[ 1 ] Back to Menu
[ 2 ] Leave
                `)
                back = ["1", "2"]
                var back = rs.question(chalk.green("[ ! ]") + " Input Menu : ")
                    if (back.length === 0) {
                        console.log(chalk.red("[ x ]") +  " Please Input Menu!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }
                    if (!Number(back)) { 
                        console.log(chalk.red("[ x ]") +  " Please Input Menu With Numbers Not Letters!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }
                    if (!list.includes(back)) { 
                        console.log(chalk.red("[ x ]") +  " Please Input The Number Of Menu Correctly!");
                        back = rs.question(chalk.green("[ ! ]") + " Input Menu (1, 2): ");
                    }

                if (back == "1") {
                    start()
                } else if (back == "2") {
                    return
                }

            }       
        }

    // STUMBLE EXPLOIT
    } else if (select == "2") {

        const code = rs.question(chalk.green("[ ! ]") + " Input Your Auth : ");
        if (code.length === 0) { 
            console.log(chalk.red("[ x ]") +  " Please Input Your Auth!");
        }
        console.log(`
[ 1 ] Round 1
[ 2 ] Round 2
[ 3 ] Round 3
`)
        list = ["1", "2", "3"]
        var round = rs.question(chalk.green("[ ! ]") + " Input Your Round (1, 2, 3) : ");
            if (round.length === 0) {
                console.log(chalk.red("[ x ]") +  " Please Input Round!");
                round = rs.question(chalk.green("[ ! ]") + " Input Your Round (1, 2, 3) : ");
            }
            if (!Number(round)) { 
                console.log(chalk.red("[ x ]") +  " Please Input Round With Numbers Not Letters!");
                round = rs.question(chalk.green("[ ! ]") + " Input Your Round (1, 2, 3): ");
            }
            if (!list.includes(round)) { 
                console.log(chalk.red("[ x ]") +  " Please Input The Number Of Rounds Correctly!");
                round = rs.question(chalk.green("[ ! ]") + " Input Your Round (1, 2, 3): ");
            }
        var delay = rs.question(chalk.green("[ ! ]") + " Input Delay (Minimum : 3) : ");
            if (delay.length === 0) {
                console.log(chalk.red("[ x ]") +  " Please Input Delay!");
                delay = rs.question(chalk.green("[ ! ]") + " Input Delay (Minimum : 3) : ");
            }
            if (!Number(delay)) { 
                console.log(chalk.red("[ x ]") +  " Please Input Delay With Numbers Not Letters!");
                delay = rs.question(chalk.green("[ ! ]") + " Input Delay (Minimum : 3) : ");
            }
            if (delay < 1) {
                console.log(chalk.red("[ x ]") +  " The Minimum Delay Is 3 To Reduce The Risk Of Being Banned!");
                delay = rs.question(chalk.green("[ ! ]") + " Input Delay (Minimum : 3) : ");
            }

        console.log("")
    
        while(true) {

            const result = await runExploit(code, round, delay)
            if (!result) {
                console.log(chalk.red("[ x ]") + " YOUR AUTH IS INVALID OR HAS EXPIRED!")
                console.log(chalk.red("[ x ]") + " PLEASE CHECK YOUR AUTH TOKEN AGAIN!")
                return
            } else if (result.User) {
                console.log(chalk.green("[ + ]") + " | " + moment().format("HH:mm:ss") + " | " + chalk.blue(result.User.Username) + " | " +  chalk.red(result.User.Country) + " | " + chalk.yellow(result.User.SkillRating) + " Thropies" + " | " + chalk.yellow(result.User.Crowns) + " Crowns")
            } else if (result.includes("BANNED")) {
                console.log(chalk.red("[ x ]") + " YOUR ACCOUNT HAS BEEN BANNED!")
                return
            } 
        }
    }

}
